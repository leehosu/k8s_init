kind: ServiceAccount
apiVersion: v1
metadata:
  name: efs-sa
  namespace: {namespace-name}
---
kind: ClusterRole # Role of kubernetes
apiVersion: rbac.authorization.k8s.io/v1 # auth API
metadata:
  name: efs-cr
rules:
  - apiGroups: [""] # rules on persistentvolumes
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "create", "delete"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "update", "patch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: efs-crb
subjects:
  - kind: ServiceAccount
    name: efs-saa 
    namespace: {namespace-name}
roleRef:
  kind: ClusterRole # Binding Service Account
  name: efs-cr # Binding name Cluster Role
  apiGroup: rbac.authorization.k8s.io
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: efs-or
rules:
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: efs-or
subjects:
  - kind: ServiceAccount
    name: efs-sa # Binding name Service Account
    # replace with namespace where provisioner is deployed
    namespace: {namespace-name}
roleRef:
  kind: Role
  name: efs-or
  apiGroup: rbac.authorization.k8s.io
